/**
 * Generate env.js from .env file
 * 
 * This script reads the .env file and generates a js/env.js file that can be loaded
 * in the browser to provide environment variables to client-side code.
 * 
 * IMPORTANT: This script should only be used in development. In production,
 * sensitive environment variables should be handled server-side and not
 * exposed to the client.
 */

const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables from .env file
dotenv.config();

// Define which variables are safe to expose to the browser
// SECURITY WARNING: Do not include sensitive API keys or secrets here
const SAFE_ENV_VARS = [
  'NODE_ENV',
  'PORT',
  'CACHE_TTL',
  'LOG_LEVEL',
  // Add other non-sensitive variables here
];

// Create a filtered environment object with only safe variables
const safeEnv = {};
SAFE_ENV_VARS.forEach(key => {
  if (process.env[key]) {
    safeEnv[key] = process.env[key];
  }
});

// Create the output directory if it doesn't exist
const outputDir = path.join(__dirname, 'js');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Generate the env.js file content
const envJsContent = `/**
 * GENERATED FILE - DO NOT EDIT DIRECTLY
 * 
 * This file is generated by generate-env-js.js from the .env file.
 * To update this file, modify .env and run 'node generate-env-js.js'.
 * 
 * NOTE: This file should be excluded from version control (.gitignore).
 */

// Environment variables for browser use
window.ENV = ${JSON.stringify(safeEnv, null, 2)};
`;

// Write the env.js file
const outputFile = path.join(outputDir, 'env.js');
fs.writeFileSync(outputFile, envJsContent);

console.log(`Generated ${outputFile} with ${Object.keys(safeEnv).length} environment variables.`);
console.log('IMPORTANT: Make sure js/env.js is in your .gitignore file!');
